{"ast":null,"code":"var _jsxFileName = \"D:\\\\portfolio\\\\portfolio-site\\\\src\\\\components\\\\InteractiveLines-pro.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveLines = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const mousePos = useRef({\n    x: 0,\n    y: 0\n  });\n  const points = useRef([]);\n  const animationFrameId = useRef();\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const setCanvasSize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    setCanvasSize();\n    window.addEventListener('resize', setCanvasSize);\n\n    // Initialize grid points\n    const initGrid = () => {\n      const gridSize = 40; // Increased grid size for better visibility\n      const cols = Math.floor(canvas.width / gridSize) + 1;\n      const rows = Math.floor(canvas.height / gridSize) + 1;\n      points.current = [];\n      for (let i = 0; i < cols; i++) {\n        const col = [];\n        for (let j = 0; j < rows; j++) {\n          col.push({\n            x: i * gridSize,\n            y: j * gridSize,\n            baseX: i * gridSize,\n            baseY: j * gridSize\n          });\n        }\n        points.current.push(col);\n      }\n    };\n    initGrid();\n\n    // Mouse move handler\n    const handleMouseMove = e => {\n      const rect = canvas.getBoundingClientRect();\n      mousePos.current = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      };\n    };\n    canvas.addEventListener('mousemove', handleMouseMove);\n\n    // Animation\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Set line style\n      ctx.strokeStyle = '#4A90E2';\n      ctx.lineWidth = 0.5;\n\n      // Update points\n      for (let i = 0; i < points.current.length; i++) {\n        for (let j = 0; j < points.current[i].length; j++) {\n          const point = points.current[i][j];\n          const dx = mousePos.current.x - point.baseX;\n          const dy = mousePos.current.y - point.baseY;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const force = Math.max(0, 1 - distance / 150);\n\n          // Update both x and y positions for better interaction\n          point.x = point.baseX + dx * force * 0.2;\n          point.y = point.baseY + dy * force * 0.2;\n        }\n      }\n\n      // Draw vertical lines\n      for (let i = 0; i < points.current.length; i++) {\n        ctx.beginPath();\n        for (let j = 0; j < points.current[i].length; j++) {\n          const point = points.current[i][j];\n          if (j === 0) {\n            ctx.moveTo(point.x, point.y);\n          } else {\n            ctx.lineTo(point.x, point.y);\n          }\n        }\n        ctx.stroke();\n      }\n\n      // Draw horizontal lines\n      for (let j = 0; j < points.current[0].length; j++) {\n        ctx.beginPath();\n        for (let i = 0; i < points.current.length; i++) {\n          const point = points.current[i][j];\n          if (i === 0) {\n            ctx.moveTo(point.x, point.y);\n          } else {\n            ctx.lineTo(point.x, point.y);\n          }\n        }\n        ctx.stroke();\n      }\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', setCanvasSize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      background: '#F4F1EC'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveLines, \"H9Y2J09gO5fox0EV1IxuxzqohY4=\");\n_c = InteractiveLines;\nexport default InteractiveLines;\nvar _c;\n$RefreshReg$(_c, \"InteractiveLines\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","InteractiveLines","_s","canvasRef","mousePos","x","y","points","animationFrameId","canvas","current","ctx","getContext","setCanvasSize","width","window","innerWidth","height","innerHeight","addEventListener","initGrid","gridSize","cols","Math","floor","rows","i","col","j","push","baseX","baseY","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","animate","clearRect","strokeStyle","lineWidth","length","point","dx","dy","distance","sqrt","force","max","beginPath","moveTo","lineTo","stroke","requestAnimationFrame","removeEventListener","cancelAnimationFrame","ref","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/portfolio/portfolio-site/src/components/InteractiveLines-pro.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n  baseX: number;\r\n  baseY: number;\r\n}\r\n\r\nconst InteractiveLines: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const mousePos = useRef({ x: 0, y: 0 });\r\n  const points = useRef<Point[][]>([]);\r\n  const animationFrameId = useRef<number>();\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Set canvas size\r\n    const setCanvasSize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    setCanvasSize();\r\n    window.addEventListener('resize', setCanvasSize);\r\n\r\n    // Initialize grid points\r\n    const initGrid = () => {\r\n      const gridSize = 40; // Increased grid size for better visibility\r\n      const cols = Math.floor(canvas.width / gridSize) + 1;\r\n      const rows = Math.floor(canvas.height / gridSize) + 1;\r\n\r\n      points.current = [];\r\n      for (let i = 0; i < cols; i++) {\r\n        const col: Point[] = [];\r\n        for (let j = 0; j < rows; j++) {\r\n          col.push({\r\n            x: i * gridSize,\r\n            y: j * gridSize,\r\n            baseX: i * gridSize,\r\n            baseY: j * gridSize,\r\n          });\r\n        }\r\n        points.current.push(col);\r\n      }\r\n    };\r\n    initGrid();\r\n\r\n    // Mouse move handler\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      mousePos.current = {\r\n        x: e.clientX - rect.left,\r\n        y: e.clientY - rect.top,\r\n      };\r\n    };\r\n    canvas.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Animation\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Set line style\r\n      ctx.strokeStyle = '#4A90E2';\r\n      ctx.lineWidth = 0.5;\r\n\r\n      // Update points\r\n      for (let i = 0; i < points.current.length; i++) {\r\n        for (let j = 0; j < points.current[i].length; j++) {\r\n          const point = points.current[i][j];\r\n          const dx = mousePos.current.x - point.baseX;\r\n          const dy = mousePos.current.y - point.baseY;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          const force = Math.max(0, 1 - distance / 150);\r\n          \r\n          // Update both x and y positions for better interaction\r\n          point.x = point.baseX + (dx * force * 0.2);\r\n          point.y = point.baseY + (dy * force * 0.2);\r\n        }\r\n      }\r\n\r\n      // Draw vertical lines\r\n      for (let i = 0; i < points.current.length; i++) {\r\n        ctx.beginPath();\r\n        for (let j = 0; j < points.current[i].length; j++) {\r\n          const point = points.current[i][j];\r\n          if (j === 0) {\r\n            ctx.moveTo(point.x, point.y);\r\n          } else {\r\n            ctx.lineTo(point.x, point.y);\r\n          }\r\n        }\r\n        ctx.stroke();\r\n      }\r\n\r\n      // Draw horizontal lines\r\n      for (let j = 0; j < points.current[0].length; j++) {\r\n        ctx.beginPath();\r\n        for (let i = 0; i < points.current.length; i++) {\r\n          const point = points.current[i][j];\r\n          if (i === 0) {\r\n            ctx.moveTo(point.x, point.y);\r\n          } else {\r\n            ctx.lineTo(point.x, point.y);\r\n          }\r\n        }\r\n        ctx.stroke();\r\n      }\r\n\r\n      animationFrameId.current = requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', setCanvasSize);\r\n      canvas.removeEventListener('mousemove', handleMouseMove);\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      style={{\r\n        width: '100%',\r\n        height: '100%',\r\n        background: '#F4F1EC',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InteractiveLines;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}