{"ast":null,"code":"var _jsxFileName = \"D:\\\\portfolio\\\\portfolio-site\\\\src\\\\components\\\\InteractiveLines-p.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveLines = () => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    let container;\n    let camera;\n    let scene;\n    let raycaster;\n    let renderer;\n    let parentTransform;\n    let stats;\n    let cameraTheta = 0;\n    let floatingPlane;\n    let planeVelocity = new THREE.Vector3((Math.random() - 0.5) * 0.01, (Math.random() - 0.5) * 0.01, (Math.random() - 0.5) * 0.01);\n    let planeRotationSpeed = new THREE.Vector3((Math.random() - 0.5) * 0.005, (Math.random() - 0.5) * 0.005, (Math.random() - 0.5) * 0.005);\n    const pointer = new THREE.Vector2();\n    const cameraRadius = 100;\n    let mouseDistance = 0;\n    let lastMousePosition = new THREE.Vector2();\n    let isMouseMoving = false;\n    let mouseMoveTimer;\n\n    // PawMeet theme colors\n    const themeColors = {\n      primary: 0xFFB6C1,\n      // Light pink\n      secondary: 0x87CEEB,\n      // Sky blue\n      accent: 0xFFD700,\n      // Gold\n      background: 0xF8F8FF // Ghost white\n    };\n    const onPointerMove = event => {\n      const currentMousePosition = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);\n      mouseDistance = currentMousePosition.distanceTo(lastMousePosition);\n      lastMousePosition.copy(currentMousePosition);\n      pointer.copy(currentMousePosition);\n      isMouseMoving = true;\n      clearTimeout(mouseMoveTimer);\n      mouseMoveTimer = setTimeout(() => {\n        isMouseMoving = false;\n      }, 100);\n    };\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      render();\n      stats.update();\n    };\n    const render = () => {\n      cameraTheta += 0.03;\n      camera.position.x = cameraRadius * Math.sin(THREE.MathUtils.degToRad(cameraTheta));\n      camera.position.y = cameraRadius * Math.sin(THREE.MathUtils.degToRad(cameraTheta * 0.5));\n      camera.position.z = cameraRadius * Math.cos(THREE.MathUtils.degToRad(cameraTheta));\n      camera.lookAt(scene.position);\n      camera.updateMatrixWorld();\n\n      // Update floating plane with mouse interaction\n      if (isMouseMoving) {\n        const mouseInfluence = Math.min(mouseDistance * 0.1, 0.5);\n        planeVelocity.x += (Math.random() - 0.5) * mouseInfluence;\n        planeVelocity.y += (Math.random() - 0.5) * mouseInfluence;\n        planeVelocity.z += (Math.random() - 0.5) * mouseInfluence;\n      }\n      floatingPlane.position.add(planeVelocity);\n      floatingPlane.rotation.x += planeRotationSpeed.x;\n      floatingPlane.rotation.y += planeRotationSpeed.y;\n      floatingPlane.rotation.z += planeRotationSpeed.z;\n\n      // Smooth bouncing with damping\n      if (Math.abs(floatingPlane.position.x) > 40) {\n        planeVelocity.x *= -0.8;\n        floatingPlane.position.x = Math.sign(floatingPlane.position.x) * 40;\n        planeRotationSpeed.x *= -0.8;\n      }\n      if (Math.abs(floatingPlane.position.y) > 40) {\n        planeVelocity.y *= -0.8;\n        floatingPlane.position.y = Math.sign(floatingPlane.position.y) * 40;\n        planeRotationSpeed.y *= -0.8;\n      }\n      if (Math.abs(floatingPlane.position.z) > 40) {\n        planeVelocity.z *= -0.8;\n        floatingPlane.position.z = Math.sign(floatingPlane.position.z) * 40;\n        planeRotationSpeed.z *= -0.8;\n      }\n\n      // Add some natural movement\n      planeVelocity.multiplyScalar(0.99);\n      planeRotationSpeed.multiplyScalar(0.99);\n      if (Math.random() < 0.005) {\n        planeVelocity.set((Math.random() - 0.5) * 0.01, (Math.random() - 0.5) * 0.01, (Math.random() - 0.5) * 0.01);\n        planeRotationSpeed.set((Math.random() - 0.5) * 0.005, (Math.random() - 0.5) * 0.005, (Math.random() - 0.5) * 0.005);\n      }\n      raycaster.setFromCamera(pointer, camera);\n      const intersects = raycaster.intersectObjects(parentTransform.children, true);\n\n      // Update lines based on mouse interaction\n      parentTransform.children.forEach(line => {\n        if (line instanceof THREE.Line) {\n          const material = line.material;\n          const distance = line.position.distanceTo(floatingPlane.position);\n\n          // Change color based on distance to mouse\n          if (intersects.length > 0 && intersects[0].object === line) {\n            material.color.set(themeColors.accent);\n            material.opacity = 1;\n          } else {\n            const baseColor = new THREE.Color(themeColors.primary);\n            const targetColor = new THREE.Color(themeColors.secondary);\n            const t = Math.min(distance / 100, 1);\n            material.color.lerpColors(baseColor, targetColor, t);\n            material.opacity = 0.6 + Math.sin(Date.now() * 0.001) * 0.2;\n          }\n\n          // Add subtle movement to lines\n          line.rotation.x += Math.sin(Date.now() * 0.0001) * 0.001;\n          line.rotation.y += Math.cos(Date.now() * 0.0001) * 0.001;\n        }\n      });\n      renderer.render(scene, camera);\n    };\n    if (containerRef.current) {\n      container = containerRef.current;\n      camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(themeColors.background);\n      const planeGeometry = new THREE.PlaneGeometry(60, 60);\n      const planeMaterial = new THREE.MeshBasicMaterial({\n        color: themeColors.primary,\n        transparent: true,\n        opacity: 0.7,\n        side: THREE.DoubleSide\n      });\n      floatingPlane = new THREE.Mesh(planeGeometry, planeMaterial);\n      floatingPlane.position.set((Math.random() - 0.5) * 40, (Math.random() - 0.5) * 40, (Math.random() - 0.5) * 40);\n      floatingPlane.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI);\n      scene.add(floatingPlane);\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(1, 1, 1);\n      scene.add(directionalLight);\n      const lineGeometry = new THREE.BufferGeometry();\n      const points = [];\n      const point = new THREE.Vector3();\n      const direction = new THREE.Vector3();\n      for (let i = 0; i < 30; i++) {\n        direction.x += (Math.random() - 0.5) * 0.5;\n        direction.y += (Math.random() - 0.5) * 0.5;\n        direction.z += (Math.random() - 0.5) * 0.5;\n        direction.normalize().multiplyScalar(8);\n        point.add(direction);\n        points.push(point.x, point.y, point.z);\n      }\n      lineGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(points, 3));\n      parentTransform = new THREE.Object3D();\n      for (let i = 0; i < 30; i++) {\n        const lineMaterial = new THREE.LineBasicMaterial({\n          color: themeColors.primary,\n          transparent: true,\n          opacity: 0.6\n        });\n        const object = new THREE.Line(lineGeometry, lineMaterial);\n        object.position.set(Math.random() * 300 - 150, Math.random() * 300 - 150, Math.random() * 300 - 150);\n        object.rotation.set(Math.random() * Math.PI * 2, Math.random() * Math.PI * 2, Math.random() * Math.PI * 2);\n        object.scale.set(Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5);\n        parentTransform.add(object);\n      }\n      scene.add(parentTransform);\n      raycaster = new THREE.Raycaster();\n      raycaster.params.Line.threshold = 2;\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(renderer.domElement);\n      stats = new Stats();\n      container.appendChild(stats.dom);\n      window.addEventListener(\"resize\", onWindowResize);\n      document.addEventListener(\"pointermove\", onPointerMove);\n      animate();\n    }\n    return () => {\n      window.removeEventListener(\"resize\", onWindowResize);\n      document.removeEventListener(\"pointermove\", onPointerMove);\n      clearTimeout(mouseMoveTimer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"absolute inset-0 z-0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 10\n  }, this);\n};\n_s(InteractiveLines, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = InteractiveLines;\nexport default InteractiveLines;\nvar _c;\n$RefreshReg$(_c, \"InteractiveLines\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","Stats","jsxDEV","_jsxDEV","InteractiveLines","_s","containerRef","container","camera","scene","raycaster","renderer","parentTransform","stats","cameraTheta","floatingPlane","planeVelocity","Vector3","Math","random","planeRotationSpeed","pointer","Vector2","cameraRadius","mouseDistance","lastMousePosition","isMouseMoving","mouseMoveTimer","themeColors","primary","secondary","accent","background","onPointerMove","event","currentMousePosition","clientX","window","innerWidth","clientY","innerHeight","distanceTo","copy","clearTimeout","setTimeout","onWindowResize","aspect","updateProjectionMatrix","setSize","animate","requestAnimationFrame","render","update","position","x","sin","MathUtils","degToRad","y","z","cos","lookAt","updateMatrixWorld","mouseInfluence","min","add","rotation","abs","sign","multiplyScalar","set","setFromCamera","intersects","intersectObjects","children","forEach","line","Line","material","distance","length","object","color","opacity","baseColor","Color","targetColor","t","lerpColors","Date","now","current","PerspectiveCamera","Scene","planeGeometry","PlaneGeometry","planeMaterial","MeshBasicMaterial","transparent","side","DoubleSide","Mesh","PI","ambientLight","AmbientLight","directionalLight","DirectionalLight","lineGeometry","BufferGeometry","points","point","direction","i","normalize","push","setAttribute","Float32BufferAttribute","Object3D","lineMaterial","LineBasicMaterial","scale","Raycaster","params","threshold","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","appendChild","domElement","dom","addEventListener","document","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/portfolio/portfolio-site/src/components/InteractiveLines-p.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\n\r\nconst InteractiveLines: React.FC = () => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    let container: HTMLDivElement;\r\n    let camera: THREE.PerspectiveCamera;\r\n    let scene: THREE.Scene;\r\n    let raycaster: THREE.Raycaster;\r\n    let renderer: THREE.WebGLRenderer;\r\n    let parentTransform: THREE.Object3D;\r\n    let stats: Stats;\r\n    let cameraTheta = 0;\r\n    let floatingPlane: THREE.Mesh;\r\n    let planeVelocity = new THREE.Vector3(\r\n      (Math.random() - 0.5) * 0.01,\r\n      (Math.random() - 0.5) * 0.01,\r\n      (Math.random() - 0.5) * 0.01\r\n    );\r\n    let planeRotationSpeed = new THREE.Vector3(\r\n      (Math.random() - 0.5) * 0.005,\r\n      (Math.random() - 0.5) * 0.005,\r\n      (Math.random() - 0.5) * 0.005\r\n    );\r\n\r\n    const pointer = new THREE.Vector2();\r\n    const cameraRadius = 100;\r\n    let mouseDistance = 0;\r\n    let lastMousePosition = new THREE.Vector2();\r\n    let isMouseMoving = false;\r\n    let mouseMoveTimer: NodeJS.Timeout;\r\n\r\n    // PawMeet theme colors\r\n    const themeColors = {\r\n      primary: 0xFFB6C1,    // Light pink\r\n      secondary: 0x87CEEB,  // Sky blue\r\n      accent: 0xFFD700,     // Gold\r\n      background: 0xF8F8FF  // Ghost white\r\n    };\r\n\r\n    const onPointerMove = (event: PointerEvent) => {\r\n      const currentMousePosition = new THREE.Vector2(\r\n        (event.clientX / window.innerWidth) * 2 - 1,\r\n        -(event.clientY / window.innerHeight) * 2 + 1\r\n      );\r\n\r\n      mouseDistance = currentMousePosition.distanceTo(lastMousePosition);\r\n      lastMousePosition.copy(currentMousePosition);\r\n      pointer.copy(currentMousePosition);\r\n\r\n      isMouseMoving = true;\r\n      clearTimeout(mouseMoveTimer);\r\n      mouseMoveTimer = setTimeout(() => {\r\n        isMouseMoving = false;\r\n      }, 100);\r\n    };\r\n\r\n    const onWindowResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      render();\r\n      stats.update();\r\n    };\r\n\r\n    const render = () => {\r\n      cameraTheta += 0.03;\r\n      camera.position.x = cameraRadius * Math.sin(THREE.MathUtils.degToRad(cameraTheta));\r\n      camera.position.y = cameraRadius * Math.sin(THREE.MathUtils.degToRad(cameraTheta * 0.5));\r\n      camera.position.z = cameraRadius * Math.cos(THREE.MathUtils.degToRad(cameraTheta));\r\n      camera.lookAt(scene.position);\r\n      camera.updateMatrixWorld();\r\n\r\n      // Update floating plane with mouse interaction\r\n      if (isMouseMoving) {\r\n        const mouseInfluence = Math.min(mouseDistance * 0.1, 0.5);\r\n        planeVelocity.x += (Math.random() - 0.5) * mouseInfluence;\r\n        planeVelocity.y += (Math.random() - 0.5) * mouseInfluence;\r\n        planeVelocity.z += (Math.random() - 0.5) * mouseInfluence;\r\n      }\r\n\r\n      floatingPlane.position.add(planeVelocity);\r\n      floatingPlane.rotation.x += planeRotationSpeed.x;\r\n      floatingPlane.rotation.y += planeRotationSpeed.y;\r\n      floatingPlane.rotation.z += planeRotationSpeed.z;\r\n\r\n      // Smooth bouncing with damping\r\n      if (Math.abs(floatingPlane.position.x) > 40) {\r\n        planeVelocity.x *= -0.8;\r\n        floatingPlane.position.x = Math.sign(floatingPlane.position.x) * 40;\r\n        planeRotationSpeed.x *= -0.8;\r\n      }\r\n      if (Math.abs(floatingPlane.position.y) > 40) {\r\n        planeVelocity.y *= -0.8;\r\n        floatingPlane.position.y = Math.sign(floatingPlane.position.y) * 40;\r\n        planeRotationSpeed.y *= -0.8;\r\n      }\r\n      if (Math.abs(floatingPlane.position.z) > 40) {\r\n        planeVelocity.z *= -0.8;\r\n        floatingPlane.position.z = Math.sign(floatingPlane.position.z) * 40;\r\n        planeRotationSpeed.z *= -0.8;\r\n      }\r\n\r\n      // Add some natural movement\r\n      planeVelocity.multiplyScalar(0.99);\r\n      planeRotationSpeed.multiplyScalar(0.99);\r\n\r\n      if (Math.random() < 0.005) {\r\n        planeVelocity.set(\r\n          (Math.random() - 0.5) * 0.01,\r\n          (Math.random() - 0.5) * 0.01,\r\n          (Math.random() - 0.5) * 0.01\r\n        );\r\n        planeRotationSpeed.set(\r\n          (Math.random() - 0.5) * 0.005,\r\n          (Math.random() - 0.5) * 0.005,\r\n          (Math.random() - 0.5) * 0.005\r\n        );\r\n      }\r\n\r\n      raycaster.setFromCamera(pointer, camera);\r\n      const intersects = raycaster.intersectObjects(parentTransform.children, true);\r\n\r\n      // Update lines based on mouse interaction\r\n      parentTransform.children.forEach((line) => {\r\n        if (line instanceof THREE.Line) {\r\n          const material = line.material as THREE.LineBasicMaterial;\r\n          const distance = line.position.distanceTo(floatingPlane.position);\r\n          \r\n          // Change color based on distance to mouse\r\n          if (intersects.length > 0 && intersects[0].object === line) {\r\n            material.color.set(themeColors.accent);\r\n            material.opacity = 1;\r\n          } else {\r\n            const baseColor = new THREE.Color(themeColors.primary);\r\n            const targetColor = new THREE.Color(themeColors.secondary);\r\n            const t = Math.min(distance / 100, 1);\r\n            material.color.lerpColors(baseColor, targetColor, t);\r\n            material.opacity = 0.6 + Math.sin(Date.now() * 0.001) * 0.2;\r\n          }\r\n\r\n          // Add subtle movement to lines\r\n          line.rotation.x += Math.sin(Date.now() * 0.0001) * 0.001;\r\n          line.rotation.y += Math.cos(Date.now() * 0.0001) * 0.001;\r\n        }\r\n      });\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    if (containerRef.current) {\r\n      container = containerRef.current;\r\n\r\n      camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\r\n      scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(themeColors.background);\r\n\r\n      const planeGeometry = new THREE.PlaneGeometry(60, 60);\r\n      const planeMaterial = new THREE.MeshBasicMaterial({ \r\n        color: themeColors.primary,\r\n        transparent: true,\r\n        opacity: 0.7,\r\n        side: THREE.DoubleSide\r\n      });\r\n      floatingPlane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n      floatingPlane.position.set(\r\n        (Math.random() - 0.5) * 40,\r\n        (Math.random() - 0.5) * 40,\r\n        (Math.random() - 0.5) * 40\r\n      );\r\n      floatingPlane.rotation.set(\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI\r\n      );\r\n      scene.add(floatingPlane);\r\n\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n      scene.add(ambientLight);\r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n      directionalLight.position.set(1, 1, 1);\r\n      scene.add(directionalLight);\r\n\r\n      const lineGeometry = new THREE.BufferGeometry();\r\n      const points: number[] = [];\r\n      const point = new THREE.Vector3();\r\n      const direction = new THREE.Vector3();\r\n\r\n      for (let i = 0; i < 30; i++) {\r\n        direction.x += (Math.random() - 0.5) * 0.5;\r\n        direction.y += (Math.random() - 0.5) * 0.5;\r\n        direction.z += (Math.random() - 0.5) * 0.5;\r\n        direction.normalize().multiplyScalar(8);\r\n        point.add(direction);\r\n        points.push(point.x, point.y, point.z);\r\n      }\r\n\r\n      lineGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(points, 3));\r\n\r\n      parentTransform = new THREE.Object3D();\r\n\r\n      for (let i = 0; i < 30; i++) {\r\n        const lineMaterial = new THREE.LineBasicMaterial({ \r\n          color: themeColors.primary,\r\n          transparent: true,\r\n          opacity: 0.6\r\n        });\r\n        const object = new THREE.Line(lineGeometry, lineMaterial);\r\n\r\n        object.position.set(\r\n          Math.random() * 300 - 150,\r\n          Math.random() * 300 - 150,\r\n          Math.random() * 300 - 150\r\n        );\r\n        object.rotation.set(\r\n          Math.random() * Math.PI * 2,\r\n          Math.random() * Math.PI * 2,\r\n          Math.random() * Math.PI * 2\r\n        );\r\n        object.scale.set(\r\n          Math.random() * 0.5 + 0.5,\r\n          Math.random() * 0.5 + 0.5,\r\n          Math.random() * 0.5 + 0.5\r\n        );\r\n        parentTransform.add(object);\r\n      }\r\n\r\n      scene.add(parentTransform);\r\n\r\n      raycaster = new THREE.Raycaster();\r\n      raycaster.params.Line.threshold = 2;\r\n\r\n      renderer = new THREE.WebGLRenderer({ \r\n        antialias: true,\r\n        alpha: true\r\n      });\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      container.appendChild(renderer.domElement);\r\n\r\n      stats = new Stats();\r\n      container.appendChild(stats.dom);\r\n\r\n      window.addEventListener(\"resize\", onWindowResize);\r\n      document.addEventListener(\"pointermove\", onPointerMove);\r\n      animate();\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", onWindowResize);\r\n      document.removeEventListener(\"pointermove\", onPointerMove);\r\n      clearTimeout(mouseMoveTimer);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={containerRef} className=\"absolute inset-0 z-0\" />;\r\n};\r\n\r\nexport default InteractiveLines;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}